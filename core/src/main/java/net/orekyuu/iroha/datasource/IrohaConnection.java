package net.orekyuu.iroha.datasource;

import net.orekyuu.iroha.ThrowableFunction;
import net.orekyuu.iroha.adaptor.ConnectionAdaptor;
import net.orekyuu.iroha.util.ForceExecutor;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

public class IrohaConnection extends ConnectionAdaptor {
    private final List<Connection> connections;

    public IrohaConnection(List<Connection> connection) {
        this.connections = connection;
    }

    @Override
    public Statement createStatement() throws SQLException {
        List<Statement> statements = new ArrayList<>();
        for (Connection connection : connections) {
            statements.add(connection.createStatement());
        }
        return new IrohaStatement<>(statements, this);
    }

    private IrohaPreparedStatement createIrohaPreparedStatement(ThrowableFunction<Connection, PreparedStatement, SQLException> func) throws SQLException {
        List<PreparedStatement> statements = new ArrayList<>();
        for (Connection connection : connections) {
            statements.add(func.apply(connection));
        }
        return new IrohaPreparedStatement(this, statements);
    }
    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return createIrohaPreparedStatement(c -> c.prepareStatement(sql));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return createIrohaPreparedStatement(c -> c.prepareStatement(sql, columnIndexes));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return createIrohaPreparedStatement(c -> c.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return createIrohaPreparedStatement(c -> c.prepareStatement(sql, columnNames));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return createIrohaPreparedStatement(c -> c.prepareStatement(sql, autoGeneratedKeys));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return createIrohaPreparedStatement(c -> c.prepareStatement(sql, resultSetType, resultSetConcurrency));
    }

    @Override
    public void commit() throws SQLException {
        ForceExecutor.execute(connections, Connection::commit);
    }

    @Override
    public void rollback() throws SQLException {
        ForceExecutor.execute(connections, Connection::rollback);
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        ForceExecutor.execute(connections, c -> c.rollback(savepoint));
    }

    @Override
    public void close() throws SQLException {
        ForceExecutor.execute(connections, Connection::close);
    }
}
